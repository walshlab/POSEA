import cv2
import numpy as np
import matplotlib.pyplot as plt
from skimage.filters import threshold_multiotsu
from PIL import Image
np.set_printoptions(threshold = np.inf)
from skimage.measure import label
import math as mt
import pandas as pd


def mostFrequent(arr, n):
    # Insert all elements in Hash.
    Hash = dict()
    for i in range(n):
        if arr[i] in Hash.keys():
            Hash[arr[i]] += 1
        else:
            Hash[arr[i]] = 1

    # find the max frequency
    max_count = 0
    res = -1
    for i in Hash:
        if (max_count < Hash[i]):
            res = i
            max_count = Hash[i]
    return res

img_cp = cv2.imread('C:/Users/nianc/Desktop/Cell Segmentation Papers/Our result Activated/test8.tif', -1)
img_gt = cv2.imread('C:/Users/nianc/Desktop/Cell Segmentation Papers/Our result Activated/test7.tif', -1)


# img_gt[img_gt < 256] = 0
img_gt = img_gt.astype(int)
img_gtt = img_gt.flatten()

img_gtt = [x for x in img_gtt if x != 0]
n = len(img_gtt)
level1 = mostFrequent(img_gtt, n)

img_gtt = [x for x in img_gtt if x != level1]
n = len(img_gtt)
level2 = mostFrequent(img_gtt, n)

img_gtt = [x for x in img_gtt if x != level2]
n = len(img_gtt)
level3 = mostFrequent(img_gtt, n)

img_gtt = [x for x in img_gtt if x != level3]
n = len(img_gtt)
level4 = mostFrequent(img_gtt, n)

print(level1, level2, level3, level4)

img_gt1 = np.zeros((img_gt.shape[0], img_gt.shape[1]))
img_gt1[img_gt == level1] = 1
img_gt2 = np.zeros((img_gt.shape[0], img_gt.shape[1]))
img_gt2[img_gt == level2] = 1
img_gt3 = np.zeros((img_gt.shape[0], img_gt.shape[1]))
img_gt3[img_gt == level3] = 1
img_gt4 = np.zeros((img_gt.shape[0], img_gt.shape[1]))
img_gt4[img_gt == level4] = 1
img_gt_mask = img_gt1 + img_gt2 + img_gt3 + img_gt4

img_cp_mask = np.zeros((img_cp.shape[0], img_cp.shape[1]))
img_cp_mask[img_cp > 0] = 1
area_cp = sum(sum(img_cp_mask))
combine = img_cp_mask + img_gt_mask
combine[combine == 1] = 0
combine[combine == 2] = 1
TP = sum(sum(combine))
FP = area_cp - TP
FN = sum(sum(img_gt_mask)) - TP

DC_mask_cp = 2 * TP / (2 * TP + FP + FN)

Pre_mask_cp = TP / (TP + FP)

Re_mask_cp = TP / (TP + FN)

F_mask_cp = 2*Pre_mask_cp*Re_mask_cp / (Pre_mask_cp + Re_mask_cp)

print(DC_mask_cp, Pre_mask_cp, Re_mask_cp, F_mask_cp)


######Object part
TP_cp_obj = 0
FP_cp_obj = 0
area_cp_total = 0
overlapping_cp_mask = 0
cp_match_mask = 0

fn1_cp_obj = 0
img_gt1 = np.array(img_gt1, dtype=np.uint8)
retval1, labels1, stats1, centroids1 = cv2.connectedComponentsWithStats(img_gt1)
num_gt1, _ = np.shape(stats1)
num_gt1 -= 1
cell_each = []
cell_each_F = []
cell_each_P = []
cell_each_R = []

for i in range(num_gt1):
    img_blank = np.zeros((img_gt1.shape[0], img_gt1.shape[1]))
    img_blank[labels1 == i+1] = 1
    GT_area1 = sum(sum(img_blank))
    overlapping1 = np.multiply(img_cp, img_blank)

    if sum(sum(overlapping1)) == 0:
        fn1_cp_obj += sum(sum(img_blank))
        cell_each.append(0)

    overlapping_cp_obj = overlapping1.flatten()
    overlapping_cp_obj = overlapping_cp_obj[overlapping_cp_obj != 0]
    overlapping_cp_obj = overlapping_cp_obj.astype(int)
    counts_cp_obj = np.bincount(overlapping_cp_obj)

    if counts_cp_obj.size > 0:
        mf_value_cp_obj = np.argmax(counts_cp_obj)
        img_blank = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank[overlapping1 == mf_value_cp_obj] = 1
        TP_cp_obj += sum(sum(img_blank))

        overlapping_cp_mask += img_blank
        img_ones = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones2 = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones[img_blank > 0] = 0

        difference_cp_1 = (sum(sum(np.multiply(img_ones2, img_cp))) - sum(sum(np.multiply(img_ones, img_cp)))) / sum(sum(img_blank))
        img_blank_cp = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank_cp[img_cp == difference_cp_1] = 1
        cp_match_mask += img_blank_cp
        FP_cp_obj += (sum(sum(img_blank_cp)) - sum(sum(img_blank)))

        TP_cell1 = sum(sum(img_blank))
        FP_cell1 = sum(sum(img_blank_cp)) - sum(sum(img_blank))
        FN_cell1 = GT_area1 - sum(sum(img_blank))

        Pre_cell1 = TP_cell1 / (TP_cell1 + FP_cell1)
        Re_cell1 = TP_cell1 / (TP_cell1 + FN_cell1)
        F_cell1 = 2*Pre_cell1*Re_cell1 / (Pre_cell1 + Re_cell1)
        cell_each_P.append(Pre_cell1)
        cell_each_R.append(Re_cell1)
        cell_each_F.append(F_cell1)





fn2_cp_obj = 0
img_gt2 = np.array(img_gt2, dtype=np.uint8)
retval2, labels2, stats2, centroids2 = cv2.connectedComponentsWithStats(img_gt2)

num_gt2, _ = np.shape(stats2)
num_gt2 -= 1
for i in range(num_gt2):
    img_blank = np.zeros((img_gt2.shape[0], img_gt2.shape[1]))
    img_blank[labels2 == i+1] = 1
    GT_area2 = sum(sum(img_blank))
    overlapping2 = np.multiply(img_cp, img_blank)

    if sum(sum(overlapping2)) == 0:
        fn2_cp_obj += sum(sum(img_blank))
        cell_each.append(0)

    overlapping_cp_obj = overlapping2.flatten()
    overlapping_cp_obj = overlapping_cp_obj[overlapping_cp_obj != 0]
    overlapping_cp_obj = overlapping_cp_obj.astype(int)

    counts_cp_obj = np.bincount(overlapping_cp_obj)
    if counts_cp_obj.size > 0:
        mf_value_cp_obj = np.argmax(counts_cp_obj)
        img_blank = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank[overlapping2 == mf_value_cp_obj] = 1

        TP_cp_obj += sum(sum(img_blank))
        overlapping_cp_mask += img_blank
        img_ones = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones2 = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones[img_blank > 0] = 0

        difference_cp_2 = (sum(sum(np.multiply(img_ones2, img_cp))) - sum(sum(np.multiply(img_ones, img_cp)))) / sum(sum(img_blank))
        img_blank_cp = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank_cp[img_cp == difference_cp_2] = 1

        cp_match_mask += img_blank_cp
        FP_cp_obj += sum(sum(img_blank_cp)) - sum(sum(img_blank))

        TP_cell2 = sum(sum(img_blank))
        FP_cell2 = sum(sum(img_blank_cp)) - sum(sum(img_blank))
        FN_cell2 = GT_area2 - sum(sum(img_blank))

        Pre_cell2 = TP_cell2 / (TP_cell2 + FP_cell2)
        Re_cell2 = TP_cell2 / (TP_cell2 + FN_cell2)
        F_cell2 = 2 * Pre_cell2 * Re_cell2 / (Pre_cell2 + Re_cell2)
        cell_each_P.append(Pre_cell2)
        cell_each_R.append(Re_cell2)
        cell_each_F.append(F_cell2)



fn3_cp_obj = 0
fn3_our_obj = 0
img_gt3 = np.array(img_gt3, dtype=np.uint8)
retval3, labels3, stats3, centroids3 = cv2.connectedComponentsWithStats(img_gt3)

num_gt3, _ = np.shape(stats3)
num_gt3 -= 1
for i in range(num_gt3):
    img_blank = np.zeros((img_gt3.shape[0], img_gt3.shape[1]))
    img_blank[labels3 == i+1] = 1
    GT_area3 = sum(sum(img_blank))
    overlapping3 = np.multiply(img_cp, img_blank)
    if sum(sum(overlapping3)) == 0:
        cell_each.append(0)
        fn3_cp_obj += sum(sum(img_blank))

    overlapping_cp_obj = overlapping3.flatten()
    overlapping_cp_obj = overlapping_cp_obj[overlapping_cp_obj != 0]
    overlapping_cp_obj = overlapping_cp_obj.astype(int)
    counts_cp_obj = np.bincount(overlapping_cp_obj)
    if counts_cp_obj.size > 0:
        mf_value_cp_obj = np.argmax(counts_cp_obj)
        img_blank = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank[overlapping3 == mf_value_cp_obj] = 1

        TP_cp_obj += sum(sum(img_blank))
        overlapping_cp_mask += img_blank
        img_ones = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones2 = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones[img_blank > 0] = 0

        difference_cp_3 = (sum(sum(np.multiply(img_ones2, img_cp))) - sum(sum(np.multiply(img_ones, img_cp)))) / sum(sum(img_blank))
        img_blank_cp = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank_cp[img_cp == difference_cp_3] = 1

        cp_match_mask += img_blank_cp
        FP_cp_obj += (sum(sum(img_blank_cp)) - sum(sum(img_blank)))

        TP_cell3 = sum(sum(img_blank))
        FP_cell3 = sum(sum(img_blank_cp)) - sum(sum(img_blank))
        FN_cell3 = GT_area3 - sum(sum(img_blank))

        Pre_cell3 = TP_cell3 / (TP_cell3 + FP_cell3)
        Re_cell3 = TP_cell3 / (TP_cell3 + FN_cell3)
        F_cell3 = 2 * Pre_cell3 * Re_cell3 / (Pre_cell3 + Re_cell3)
        cell_each_P.append(Pre_cell3)
        cell_each_R.append(Re_cell3)
        cell_each_F.append(F_cell3)


fn4_cp_obj = 0
fn4_our_obj = 0
img_gt4 = np.array(img_gt4, dtype=np.uint8)
retval4, labels4, stats4, centroids4 = cv2.connectedComponentsWithStats(img_gt4)

num_gt4, _ = np.shape(stats4)
num_gt4 -= 1
for i in range(num_gt4):
    img_blank = np.zeros((img_gt4.shape[0], img_gt4.shape[1]))
    img_blank[labels4 == i+1] = 1
    GT_area4 = sum(sum(img_blank))
    overlapping4 = np.multiply(img_cp, img_blank)
    if sum(sum(overlapping4)) == 0:
        cell_each.append(0)
        fn4_cp_obj += sum(sum(img_blank))

    overlapping_cp_obj = overlapping4.flatten()
    overlapping_cp_obj = overlapping_cp_obj[overlapping_cp_obj != 0]
    overlapping_cp_obj = overlapping_cp_obj.astype(int)
    counts_cp_obj = np.bincount(overlapping_cp_obj)
    if counts_cp_obj.size > 0:
        mf_value_cp_obj = np.argmax(counts_cp_obj)
        img_blank = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank[overlapping4 == mf_value_cp_obj] = 1

        TP_cp_obj += sum(sum(img_blank))
        overlapping_cp_mask += img_blank
        img_ones = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones2 = np.ones((img_cp.shape[0], img_cp.shape[1]))
        img_ones[img_blank > 0] = 0

        difference_cp_4 = (sum(sum(np.multiply(img_ones2, img_cp))) - sum(sum(np.multiply(img_ones, img_cp)))) / sum(sum(img_blank))
        img_blank_cp = np.zeros((img_cp.shape[0], img_cp.shape[1]))
        img_blank_cp[img_cp == difference_cp_4] = 1

        cp_match_mask += img_blank_cp
        FP_cp_obj += (sum(sum(img_blank_cp)) - sum(sum(img_blank)))

        TP_cell4 = sum(sum(img_blank))
        FP_cell4 = sum(sum(img_blank_cp)) - sum(sum(img_blank))
        FN_cell4 = GT_area4 - sum(sum(img_blank))

        Pre_cell4 = TP_cell4 / (TP_cell4 + FP_cell4)
        Re_cell4 = TP_cell4 / (TP_cell4 + FN_cell4)
        F_cell4 = 2 * Pre_cell4 * Re_cell4 / (Pre_cell4 + Re_cell4)
        cell_each_P.append(Pre_cell4)
        cell_each_R.append(Re_cell4)
        cell_each_F.append(F_cell4)


img_blank = np.zeros((img_cp.shape[0], img_cp.shape[1]))
img_blank[img_cp > 0] = 1
img_cp_mask = img_blank

cp_match_mask[cp_match_mask > 0] = 1

FP_cp_obj = FP_cp_obj + sum(sum(img_cp_mask)) - sum(sum(cp_match_mask))
FN_cp_obj = sum(sum(img_gt_mask)) - TP_cp_obj

DC_cp_obj = (2 * TP_cp_obj) / (2 * TP_cp_obj + FN_cp_obj + FP_cp_obj)

Pre_cp_obj = TP_cp_obj / (TP_cp_obj + FP_cp_obj)

Re_cp_obj = TP_cp_obj / (TP_cp_obj + FN_cp_obj)

F_cp_obj = 2*Pre_cp_obj*Re_cp_obj / (Pre_cp_obj + Re_cp_obj)

print(DC_cp_obj, Pre_cp_obj, Re_cp_obj, F_cp_obj)
#
# print(cell_each_F)

cell_each_F.extend(cell_each)
cell_each_R.extend(cell_each)
cell_each_P.extend(cell_each)

cell_each_F = np.array(cell_each_F)
cell_each_R = np.array(cell_each_R)
cell_each_P = np.array(cell_each_P)

cell_each_F = pd.DataFrame([[i] for i in np.array(cell_each_F)])
cell_each_R = pd.DataFrame([[i] for i in np.array(cell_each_R)])
cell_each_P = pd.DataFrame([[i] for i in np.array(cell_each_P)])

# F_eachcell = pd.Series(cell_each_F)
# R_eachcell = pd.Series(cell_each_R)
# P_eachcell = pd.Series(cell_each_P)
#
# print(F_eachcell.describe())
# print(R_eachcell.describe())
# print(P_eachcell.describe())

data = np.column_stack([cell_each_F, cell_each_R, cell_each_P])

data = pd.DataFrame(data= data, columns=['F-measure', 'Recall', 'Precision'])
data.to_excel("output.xlsx")
